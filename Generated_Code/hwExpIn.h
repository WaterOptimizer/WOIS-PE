/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : hwExpIn.H
**     Project   : WOIS
**     Processor : MCF51QE128CLK
**     Beantype  : AsynchroSerial
**     Version   : Bean 02.453, Driver 01.25, CPU db: 3.00.052
**     Compiler  : CodeWarrior ColdFireV1 C Compiler
**     Date/Time : 7/12/2011, 1:59 PM
**     Abstract  :
**         This bean "AsynchroSerial" implements an asynchronous serial
**         communication. The bean supports different settings of
**         parity, word width, stop-bit and communication speed,
**         user can select interrupt or polling handler.
**         Communication speed can be changed also in runtime.
**         The bean requires one on-chip asynchronous serial channel.
**     Comment   :
**         The SCI2 UART is selectable between the Radio port and the Expansion-In port.
**     Settings  :
**         Serial channel              : SCI2
**
**         Protocol
**             Init baud rate          : 9600baud
**             Width                   : 8 bits
**             Stop bits               : 1
**             Parity                  : none
**             Breaks                  : Disabled
**
**         Registers
**             Input buffer            : SCI2D     [0xFFFF9877]
**             Output buffer           : SCI2D     [0xFFFF9877]
**             Control register        : SCI2C1    [0xFFFF9872]
**             Mode register           : SCI2C2    [0xFFFF9873]
**             Baud setting reg.       : SCI2BD    [0xFFFF9870]
**             Special register        : SCI2S1    [0xFFFF9874]
**
**         Input interrupt
**             Vector name             : Vsci2rx
**             Priority                : 240
**
**         Output interrupt
**             Vector name             : Vsci2tx
**             Priority                : 240
**
**         Used pins:
**         ----------------------------------------------------------
**           Function | On package           |    Name
**         ----------------------------------------------------------
**            Input   |     64               |  PTC6_RGPIO14_RxD2_ACMP2PLUS
**            Output  |     63               |  PTC7_RGPIO15_TxD2_ACMP2MINUS
**         ----------------------------------------------------------
**
**
**
**     Contents  :
**         Enable          - byte hwExpIn_Enable(void);
**         Disable         - byte hwExpIn_Disable(void);
**         RecvChar        - byte hwExpIn_RecvChar(hwExpIn_TComData *Chr);
**         SendChar        - byte hwExpIn_SendChar(hwExpIn_TComData Chr);
**         GetCharsInRxBuf - word hwExpIn_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word hwExpIn_GetCharsInTxBuf(void);
**         GetRxIdle       - bool hwExpIn_GetRxIdle(void);
**         GetTxComplete   - bool hwExpIn_GetTxComplete(void);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2008
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __hwExpIn
#define __hwExpIn

/* MODULE hwExpIn. */

#include "hwCpu.h"




#ifndef __BWUserType_hwExpIn_TError
#define __BWUserType_hwExpIn_TError
  typedef union {
    byte err;
    struct {
      bool OverRun  : 1;               /* Overrun error flag */
      bool Framing  : 1;               /* Framing error flag */
      bool Parity   : 1;               /* Parity error flag */
      bool RxBufOvf : 1;               /* Rx buffer full error flag */
      bool Noise    : 1;               /* Noise error flag */
      bool Break    : 1;               /* Break detect */
      bool LINSync  : 1;               /* LIN synchronization error */
      bool BitError  : 1;              /* Bit error flag - mismatch to the expected value happened. */
    } errName;
  } hwExpIn_TError;                    /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
#endif

#ifndef __BWUserType_hwExpIn_TComData
#define __BWUserType_hwExpIn_TComData
  typedef byte hwExpIn_TComData ;      /* User type for communication. Size of this type depends on the communication data witdh. */
#endif



byte hwExpIn_Enable(void);
/*
** ===================================================================
**     Method      :  hwExpIn_Enable (bean AsynchroSerial)
**
**     Description :
**         Enables the bean - it starts the send and receive
**         functions. Events may be generated
**         ("DisableEvent"/"EnableEvent").
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte hwExpIn_Disable(void);
/*
** ===================================================================
**     Method      :  hwExpIn_Disable (bean AsynchroSerial)
**
**     Description :
**         Disables the bean - it stops the send and receive
**         functions. No events will be generated.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte hwExpIn_RecvChar(hwExpIn_TComData *Chr);
/*
** ===================================================================
**     Method      :  hwExpIn_RecvChar (bean AsynchroSerial)
**
**     Description :
**         If any data is received, this method returns one
**         character, otherwise it returns an error code (it does
**         not wait for data). This method is enabled only if the
**         receiver property is enabled.
**         [Note:] Because the preferred method to handle error and
**         break exception in the interrupt mode is to use events
**         <OnError> and <OnBreak> the return value ERR_RXEMPTY has
**         higher priority than other error codes. As a consequence
**         the information about an exception in interrupt mode is
**         returned only if there is a valid character ready to be
**         read.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to a received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_BREAK - Break character is detected
**                           (only when the <Interrupt service>
**                           property is disabled and the <Break
**                           signal> property is enabled)
**                           ERR_COMMON - common error occurred (the
**                           <GetError> method can be used for error
**                           specification)
** ===================================================================
*/

byte hwExpIn_SendChar(hwExpIn_TComData Chr);
/*
** ===================================================================
**     Method      :  hwExpIn_SendChar (bean AsynchroSerial)
**
**     Description :
**         Sends one character to the channel. If the bean is
**         temporarily disabled (Disable method) SendChar method
**         only stores data into an output buffer. In case of a zero
**         output buffer size, only one character can be stored.
**         Enabling the bean (Enable method) starts the transmission
**         of the stored data. This method is available only if the
**         transmitter property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

word hwExpIn_GetCharsInRxBuf(void);
/*
** ===================================================================
**     Method      :  hwExpIn_GetCharsInRxBuf (bean AsynchroSerial)
**
**     Description :
**         Returns the number of characters in the input buffer.
**         This method is available only if the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the input
**                           buffer.
** ===================================================================
*/

word hwExpIn_GetCharsInTxBuf(void);
/*
** ===================================================================
**     Method      :  hwExpIn_GetCharsInTxBuf (bean AsynchroSerial)
**
**     Description :
**         Returns the number of characters in the output buffer.
**         This method is available only if the transmitter property
**         is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the output
**                           buffer.
** ===================================================================
*/

__interrupt void hwExpIn_InterruptRx(void);
/*
** ===================================================================
**     Method      :  hwExpIn_InterruptRx (bean AsynchroSerial)
**
**     Description :
**         The method services the receive interrupt of the selected 
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void hwExpIn_InterruptTx(void);
/*
** ===================================================================
**     Method      :  hwExpIn_InterruptTx (bean AsynchroSerial)
**
**     Description :
**         The method services the receive interrupt of the selected 
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void hwExpIn_InterruptError(void);
/*
** ===================================================================
**     Method      :  hwExpIn_InterruptError (bean AsynchroSerial)
**
**     Description :
**         The method services the error interrupt of the selected 
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


void hwExpIn_Init(void);
/*
** ===================================================================
**     Method      :  hwExpIn_Init (bean AsynchroSerial)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean internal 
**         variables. The method is called automatically as a part of the 
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void hwExpIn_SetHigh(void);
/*
** ===================================================================
**     Method      :  hwExpIn_SetHigh (bean AsynchroSerial)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the High speed mode. The method is 
**         called automatically as s part of the CPU SetHighSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void hwExpIn_SetSlow(void);
/*
** ===================================================================
**     Method      :  hwExpIn_SetSlow (bean AsynchroSerial)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the Slow speed mode. The method is 
**         called automatically as a part of the CPU SetSlowSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#define hwExpIn_GetTxComplete()\
  (bool) getRegBit(SCI2S1, TC)
/*
** ===================================================================
**     Method      :  hwExpIn_GetTxComplete (bean AsynchroSerial)
**
**     Description :
**         Returns whether the transmitter is finished transmitting
**         all data, preamble, and break characters and is idle. It
**         can be used to determine when it is safe to switch a line
**         driver (e.g. in RS-485 applications). This method is
**         available only if event <OnTxComplete> is disabled.
**     Parameters  : None
**     Returns     :
**         ---             - Transmission process completeness.
** ===================================================================
*/

bool hwExpIn_GetRxIdle(void);
/*
** ===================================================================
**     Method      :  hwExpIn_GetRxIdle (bean AsynchroSerial)
**
**     Description :
**         Returns the state of the receiver idle flag. This method
**         is available only if event <OnIdle> is disabled.
**     Parameters  : None
**     Returns     :
**         ---             - The state of the receiver idle flag.
** ===================================================================
*/


/* END hwExpIn. */

/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 3.03 [04.07]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/

#endif /* ifndef __hwExpIn */
