/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : hwAdc.H
**     Project   : WOIS
**     Processor : MCF51QE128CLK
**     Beantype  : ADC
**     Version   : Bean 01.452, Driver 01.21, CPU db: 3.00.052
**     Compiler  : CodeWarrior ColdFireV1 C Compiler
**     Date/Time : 5/14/2010, 1:20 PM
**     Abstract  :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings  :
**         AD control register         : ADCSC1      [0xFFFF8010]
**         AD control register         : ADCCFG      [0xFFFF8016]
**         AD control register         : ADCRH       [0xFFFF8012]
**         AD control register         : ADCRL       [0xFFFF8013]
**         AD control register         : ADCCVH      [0xFFFF8014]
**         AD control register         : ADCCVL      [0xFFFF8015]
**         AD control register         : ADCSC2      [0xFFFF8011]
**         AD control register         : APCTL1      [0xFFFF8017]
**         AD control register         : APCTL2      [0xFFFF8018]
**         AD control register         : APCTL3      [0xFFFF8019]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         User handling procedure     : not specified
**         Number of conversions       : 8
**         AD resolution               : 12-bit
**
**         Input pins
**
**              Port name              : PTF
**              Bit number (in port)   : 2
**              Bit mask of the port   : 0x0004
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTF
**              Bit number (in port)   : 3
**              Bit mask of the port   : 0x0008
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTF
**              Bit number (in port)   : 4
**              Bit mask of the port   : 0x0010
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTF
**              Bit number (in port)   : 5
**              Bit mask of the port   : 0x0020
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTF
**              Bit number (in port)   : 6
**              Bit mask of the port   : 0x0040
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTF
**              Bit number (in port)   : 7
**              Bit mask of the port   : 0x0080
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTG
**              Bit number (in port)   : 2
**              Bit mask of the port   : 0x0004
**              Port data register     : PTGD        [0xFFFF801C]
**              Port control register  : PTGDD       [0xFFFF801D]
**
**              Port name              : PTG
**              Bit number (in port)   : 3
**              Bit mask of the port   : 0x0008
**              Port data register     : PTGD        [0xFFFF801C]
**              Port control register  : PTGDD       [0xFFFF801D]
**
**              Port name              : PTG
**              Bit number (in port)   : 4
**              Bit mask of the port   : 0x0010
**              Port data register     : PTGD        [0xFFFF801C]
**              Port control register  : PTGDD       [0xFFFF801D]
**
**              Port name              : PTG
**              Bit number (in port)   : 5
**              Bit mask of the port   : 0x0020
**              Port data register     : PTGD        [0xFFFF801C]
**              Port control register  : PTGDD       [0xFFFF801D]
**
**              Port name              : PTG
**              Bit number (in port)   : 6
**              Bit mask of the port   : 0x0040
**              Port data register     : PTGD        [0xFFFF801C]
**              Port control register  : PTGDD       [0xFFFF801D]
**
**              Port name              : PTG
**              Bit number (in port)   : 7
**              Bit mask of the port   : 0x0080
**              Port data register     : PTGD        [0xFFFF801C]
**              Port control register  : PTGDD       [0xFFFF801D]
**
**         Initialization:
**              Conversion             : Enabled
**              Event                  : Enabled
**         High speed mode
**             Prescaler               : divide-by-8
**     Contents  :
**         Enable         - byte hwAdc_Enable(void);
**         Disable        - byte hwAdc_Disable(void);
**         MeasureChan    - byte hwAdc_MeasureChan(bool WaitForResult, byte Channel);
**         GetChanValue16 - byte hwAdc_GetChanValue16(byte Channel, word *Value);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2008
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __hwAdc
#define __hwAdc

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE hwAdc. */

#include "hwCpu.h"



/* Constants for channel selection */
#define hwAdc_CHANNEL_SENSOR_ZONE1      0
#define hwAdc_CHANNEL_SENSOR_ZONE2      1
#define hwAdc_CHANNEL_SENSOR_ZONE3      2
#define hwAdc_CHANNEL_SENSOR_ZONE4      3
#define hwAdc_CHANNEL_SENSOR_ZONE5      4
#define hwAdc_CHANNEL_SENSOR_ZONE6      5
#define hwAdc_CHANNEL_SENSOR_ZONE7      6
#define hwAdc_CHANNEL_SENSOR_ZONE8      7
#define hwAdc_CHANNEL_SENSOR_ZONE9      8
#define hwAdc_CHANNEL_SENSOR_ZONE10     9
#define hwAdc_CHANNEL_SENSOR_ZONE11     10
#define hwAdc_CHANNEL_SENSOR_ZONE12     11

void hwAdc_SetHigh(void);
/*
** ===================================================================
**     Method      :  hwAdc_SetHigh (bean ADC)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the High speed mode. The method is 
**         called automatically as s part of the CPU SetHighSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void hwAdc_SetSlow(void);
/*
** ===================================================================
**     Method      :  hwAdc_SetSlow (bean ADC)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the Slow speed mode. The method is 
**         called automatically as a part of the CPU SetSlowSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void hwAdc_HWEnDi(void);
/*
** ===================================================================
**     Method      :  hwAdc_HWEnDi (bean ADC)
**
**     Description :
**         Enables or disables the peripheral(s) associated with the bean.
**         The method is called automatically as a part of the Enable and 
**         Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


byte hwAdc_Enable(void);
/*
** ===================================================================
**     Method      :  hwAdc_Enable (bean ADC)
**
**     Description :
**         Enables A/D converter bean. <Events> may be generated
**         (<DisableEvent>/<EnableEvent>). If possible, this method
**         switches on A/D converter device, voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte hwAdc_Disable(void);
/*
** ===================================================================
**     Method      :  hwAdc_Disable (bean ADC)
**
**     Description :
**         Disables A/D converter bean. No <events> will be generated.
**         If possible, this method switches off A/D converter device,
**         voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define hwAdc_MeasureChan(W,Ch) PE_hwAdc_MeasureChan(Ch)
byte PE_hwAdc_MeasureChan(byte Channel);
/*
** ===================================================================
**     Method      :  hwAdc_MeasureChan (bean ADC)
**
**     Description :
**         This method performs measurement on one channel. (Note: If
**         the <number of conversions> is more than one the conversion
**         of the A/D channel is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result of
**                           conversion. If the <interrupt service> is
**                           disabled and at the same time a <number of
**                           conversions> is greater than 1, the
**                           WaitForResult parameter is ignored and the
**                           method waits for each result every time.
**         Channel         - Channel number. If only one
**                           channel in the bean is set this parameter
**                           is ignored, because the parameter is set
**                           inside this method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
**                           ERR_RANGE - Parameter "Channel" out of range
** ===================================================================
*/

byte hwAdc_GetChanValue16(byte Channel,word *Value);
/*
** ===================================================================
**     Method      :  hwAdc_GetChanValue16 (bean ADC)
**
**     Description :
**         This method returns the last measured value of the required
**         channel justified to the left. Compared with <GetChanValue>
**         method this method returns more accurate result if the
**         <number of conversions> is greater than 1 and <AD resolution>
**         is less than 16 bits. In addition, the user code dependency
**         on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the bean is set then this
**                           parameter is ignored.
**       * Value           - Pointer to the measured value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

void hwAdc_Init(void);
/*
** ===================================================================
**     Method      :  hwAdc_Init (bean ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean's 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/



/* END hwAdc. */

#endif /* ifndef __hwAdc */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 3.03 [04.07]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/
