/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : hwSpi.H
**     Project   : WOIS
**     Processor : MCF51QE128CLK
**     Beantype  : SynchroMaster
**     Version   : Bean 02.291, Driver 01.20, CPU db: 3.00.052
**     Compiler  : CodeWarrior ColdFireV1 C Compiler
**     Date/Time : 5/14/2010, 1:20 PM
**     Abstract  :
**         This bean "SynchroMaster" implements MASTER part of synchronous
**         serial master-slave communication.
**     Comment   :
**         The SPI bus supports communication to the flash memory used to store firmware update images.
**         The flash memory device is an STMicroelectronics M25P40.  This part requires the SPI bus to be
**         configured to either of two modes:CPOL=0, CPHA=0 or CPOL=1, CPHA=1.
**     Settings  :
**         Synchro type                : MASTER
**
**         Serial channel              : SPI1
**
**         Protocol
**             Init baud rate          : 6_291MHz
**             Clock edge              : falling
**             Width                   : 8 bits (always)
**             Empty character         : 0
**             Empty char. on input    : RECEIVED
**
**         Registers
**             Input buffer            : SPI1D     [0xFFFF802D]
**             Output buffer           : SPI1D     [0xFFFF802D]
**             Control register        : SPI1C1    [0xFFFF8028]
**             Mode register           : SPI1C2    [0xFFFF8029]
**             Baud setting reg.       : SPI1BR    [0xFFFF802A]
**
**
**
**         Used pins                   :
**         ----------------------------------------------------------
**              Function    | On package |    Name
**         ----------------------------------------------------------
**               Input      |     23     |  PTB4_TPM2CH1_MISO1
**               Output     |     39     |  PTB3_KBI1P7_MOSI1_ADP7
**               Clock      |     40     |  PTB2_KBI1P6_SPSCK1_ADP6
**         ----------------------------------------------------------
**
**     Contents  :
**         Enable   - byte hwSpi_Enable(void);
**         Disable  - byte hwSpi_Disable(void);
**         RecvChar - byte hwSpi_RecvChar(hwSpi_TComData *Chr);
**         SendChar - byte hwSpi_SendChar(hwSpi_TComData Chr);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2008
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __hwSpi
#define __hwSpi

/* MODULE hwSpi. */

#include "hwCpu.h"



#define hwSpi_EOF 0x00                 /* Empty character */

#ifndef __BWUserType_hwSpi_TComData
#define __BWUserType_hwSpi_TComData
  typedef byte hwSpi_TComData;         /* User type for communication. */
#endif

#ifndef __BWUserType_hwSpi_TError
#define __BWUserType_hwSpi_TError
  typedef union {
    byte err;
    struct {
      bool OverRun  : 1;   /* OverRun error flag - the data overflow on the input has been detected. Both hardware detection (if supported) and software detection (when the value of Input buffer size property is 0) is used. */
      bool RxBufOvf : 1;   /* Rx buffer full error flag - the input circular buffer defined by the Input buffer size property has overrun. */
      bool FaultErr : 1;   /* Fault mode error flag - only if supported by hardware */
    }errName;
  } hwSpi_TError;                      /* Error flags. For languages which don't support bit access is byte access only to error flags possible.  */
#endif




byte hwSpi_Enable(void);
/*
** ===================================================================
**     Method      :  hwSpi_Enable (bean SynchroMaster)
**
**     Description :
**         Enable the bean - it starts send and receive functions.
**         Events may be generated ("DisableEvent"/"EnableEvent").
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte hwSpi_Disable(void);
/*
** ===================================================================
**     Method      :  hwSpi_Disable (bean SynchroMaster)
**
**     Description :
**         Disable the bean - it stops the send and receive functions.
**         No events will be generated.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte hwSpi_RecvChar(hwSpi_TComData *Chr);
/*
** ===================================================================
**     Method      :  hwSpi_RecvChar (bean SynchroMaster)
**
**     Description :
**         If any data is received, this method returns one character,
**         otherwise it returns an error code (it does not wait for
**         data).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - A pointer to the received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_OVERRUN - Overrun error was detected
**                           from the last char or block received. In
**                           polling mode, this error code is returned
**                           only when the hardware supports detection
**                           of the overrun error. 
**                           ERR_FAULT - Fault error was detected from
**                           the last char or block received. This error
**                           may not be supported on some CPUs (see
**                           generated code).
** ===================================================================
*/

byte hwSpi_SendChar(hwSpi_TComData Chr);
/*
** ===================================================================
**     Method      :  hwSpi_SendChar (bean SynchroMaster)
**
**     Description :
**         Sends one character to the channel.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled (only if
**                           output DMA is supported and enabled)
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

void hwSpi_Init(void);
/*
** ===================================================================
**     Method      :  hwSpi_Init (bean SynchroMaster)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean internal 
**         variables. The method is called automatically as a part of the 
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void hwSpi_SetHigh(void);
/*
** ===================================================================
**     Method      :  hwSpi_SetHigh (bean SynchroMaster)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the High speed mode. The method is 
**         called automatically as s part of the CPU SetHighSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void hwSpi_SetLow(void);
/*
** ===================================================================
**     Method      :  hwSpi_SetLow (bean SynchroMaster)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the Low speed mode. The method is 
**         called automatically as a part of the CPU SetLowSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void hwSpi_SetSlow(void);
/*
** ===================================================================
**     Method      :  hwSpi_SetSlow (bean SynchroMaster)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the Slow speed mode. The method is 
**         called automatically as a part of the CPU SetSlowSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END hwSpi. */

#endif /* ifndef __hwSpi */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 3.03 [04.07]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/
